# Adding the shared folder to the pythonpath allows development work for the current repository
# given that the actual python app is located on the root, e.g., openwind/openwind
#- name: openwind | Add PYTHONPATH to bashrc
#  lineinfile: dest="/home/vagrant/.bashrc" line="export PYTHONPATH=/vagrant"

  - name: openwind | Change owner of anaconda directory (otherwise later provisioning will fail)
    shell: "sudo chown -R vagrant {{ conda_dir }}/"

  - name: openwind | create file activate.d/env_vars.sh in conda env
    file:
      path: "{{ conda_dir }}/envs/{{ env_name }}/etc/conda/activate.d/env_vars.sh"
      state: touch
      mode: u=rw,g=r,o=r
  
  - name: openwind | create file deactivate.d/env_vars.sh in conda env
    file:
      path: "{{ conda_dir }}/envs/{{ env_name }}/etc/conda/deactivate.d/env_vars.sh"
      state: touch
      mode: u=rw,g=r,o=r
  
  - name: openwind | Set comment in environment variable file
    lineinfile:
        path: "{{ conda_dir }}/envs/{{ env_name }}/etc/conda/activate.d/env_vars.sh"
        insertbefore: BOF
        line: "#!/bin/bash"
  
  - name: openwind | Set PYTHONPATH environment variable required by Nansat for use in Jupyter
    lineinfile:
        path: "{{ conda_dir }}/envs/{{ env_name }}/etc/conda/activate.d/env_vars.sh"
        line: "export PYTHONPATH=/vagrant:{{ project_home }}:{{ project_home }}/{{ project_name }}"
  
  - name: openwind | Set PROJ_LIB environment variable required by Nansat for use in Jupyter
    lineinfile:
        path: "{{ conda_dir }}/envs/{{ env_name }}/etc/conda/activate.d/env_vars.sh"
        line: "export PROJ_LIB={{ conda_dir }}/envs/{{ env_name }}/share/proj"
  
  #  - name: openwind | Set comment in environment variable file
  #    lineinfile:
  #        path: "{{ conda_dir }}/envs/{{ env_name }}/etc/conda/deactivate.d/env_vars.sh"
  #        line: "#!/bin/bash"
  #  
  #  - name: openwind | Unset PYTHONPATH environment variable when deactivating env
  #    lineinfile:
  #        path: "{{ conda_dir }}/envs/{{ env_name }}/etc/conda/deactivate.d/env_vars.sh"
  #        line: "unset PYTHONPATH=/vagrant:{{ project_home }}:{{ project_home }}/{{ project_name }}"
  #  
  #  - name: openwind | Unset PROJ_LIB environment variable when deactivating env
  #    lineinfile:
  #        path: "{{ conda_dir }}/envs/{{ env_name }}/etc/conda/deactivate.d/env_vars.sh"
  #        line: "unset PROJ_LIB={{ conda_dir }}/envs/{{ env_name }}/share/proj"
  
  - name: openwind | create shell script to run jupyter notebook
    file:
      path: /home/vagrant/run_jupyter.sh
      state: touch
      mode: u=rwx,g=r,o=r

  - name: openwind | Wait a little before activating env and starting jupyter
    lineinfile:
        path: /home/vagrant/run_jupyter.sh
        insertbefore: BOF
        line: "#!/bin/bash"

  - name: openwind | Wait a little before activating env and starting jupyter
    lineinfile:
        path: /home/vagrant/run_jupyter.sh
        line: sleep 60

  - name: openwind | Line to activate virtual env in shell script
    lineinfile:
        path: /home/vagrant/run_jupyter.sh
        line: source /home/vagrant/Miniconda3-4.6.14-Linux-x86_64/bin/activate py3openwind
  
  - name: openwind | Line to activate virtual env in shell script
    lineinfile:
        path: /home/vagrant/run_jupyter.sh
        line: "{{ conda_dir }}/envs/{{ env_name }}/bin/jupyter-notebook --ip=0.0.0.0 --no-browser --notebook-dir=/vagrant/notebooks/ --NotebookApp.token=vagrant"

  - name: openwind | Set cron shell to bash 
    cron: 
        name: SHELL
        env: yes
        job: /bin/bash
  
  - name: openwind | Add Jupyter Notebook to crontab
    cron: 
        name: "Jupyter Notebook"
        special_time: reboot
        job: "/home/vagrant/run_jupyter.sh"
  
  - name: openwind | Check if Jupyter is running
    shell: ps aux | grep jupyter | grep -v grep
    ignore_errors: yes
    changed_when: false
    register: jupyter_status
  
  - name: openwind | Launch Jupyter Notebook
    shell: "nohup /home/vagrant/run_jupyter.sh > /dev/null 2>&1 &"
    when: jupyter_status.rc != 0

  - name: openwind | Create shell script for daily data sync and wind processing
    file:
      path: /home/vagrant/daily_sync.sh
      state: touch
      mode: u=rwx,g=r,o=r

  - name: openwind | Sync script heading
    lineinfile:
        path: /home/vagrant/daily_sync.sh
        insertbefore: BOF
        line: "#!/bin/bash"

  - name: openwind | Sync script content
    blockinfile:
        path: /home/vagrant/daily_sync.sh
        block: |
            export PROJ_LIB={{ conda_dir }}/envs/{{ env_name }}/share/proj
            source {{ conda_dir }}/bin/activate {{ env_name }}
            cd {{ project_home }}/{{ project_name }}
            # Sync S1A
            {{ conda_dir }}/envs/{{ env_name }}/bin/python {{ project_home }}/{{ project_name }}/manage.py ingest_thredds_crawl http://nbstds.met.no/thredds/catalog/NBS/S1A/`date -d "yesterday 00:00" '+%Y/%m/%d'`/catalog.html
            # Sync S1B
            {{ conda_dir }}/envs/{{ env_name }}/bin/python {{ project_home }}/{{ project_name }}/manage.py ingest_thredds_crawl http://nbstds.met.no/thredds/catalog/NBS/S1B/`date -d "yesterday 00:00" '+%Y/%m/%d'`/catalog.html
            # Sync Arome Arctic
            {{ conda_dir }}/envs/{{ env_name }}/bin/python {{ project_home }}/{{ project_name }}/manage.py ingest_thredds_crawl https://thredds.met.no/thredds/catalog/aromearcticarchive/`date -d "yesterday 00:00" '+%Y/%m/%d'`/catalog.html --filename arome_arctic_vtk.*
            # Process S1 wind
            {{ conda_dir }}/envs/{{ env_name }}/bin/python {{ project_home }}/{{ project_name }}/manage.py process_sentinel1_wind --date `date -d "yesterday 00:00" '+%Y-%m-%d'`


  #  shell: "source activate {{ env_name }}; nohup {{ conda_dir }}/envs/{{ env_name }}/bin/jupyter-notebook --ip=0.0.0.0 --no-browser --notebook-dir=/vagrant/notebooks/ --NotebookApp.token=vagrant > /dev/null 2>&1 &"

  #- name: Nansat Setup Python | Check if numpy is imported
  #  shell: "nosetests test_import.py"
  #  args:
  #    chdir: "{{ shared_dir }}"

  #- name: openwind | Update/checkout Nansat
  #  git: repo=https://github.com/nansencenter/nansat
  #       dest="{{ dev_sources_dir }}/nansat/"
  #       version="{{ nansat_version }}"
  #       update=yes
  #  register: git_nansat
  #  tags:
  #    - update-nansat
  #  ignore_errors: no
  #
  #- name: openwind | Clean Nansat (always run to keep the pixel functions updated)
  #  shell: 'python setup.py clean --all'
  #  args:
  #    chdir: '{{ dev_sources_dir }}/nansat'
  #  tags:
  #    - update-nansat
  #
  #- name: openwind | Install Nansat (always run to keep the pixel functions updated)
  #  shell: 'python setup.py build_ext --inplace'
  #  args:
  #    chdir: '{{ dev_sources_dir }}/nansat'
  #  tags:
  #    - update-nansat
  #
  #- name: openwind | Create link from Python dist-packages to nansat
  #  file: path='{{ python_dist_packages }}/nansat'
  #        src='{{ dev_sources_dir }}/nansat/nansat'
  #        state=link
  #        force=yes
  #
  #- name: nansat | Create link from Python dist-packages to nansat_integration_tests
  #
